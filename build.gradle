buildscript {
    repositories {
        if (System.getenv('VERIFY_USE_PUBLIC_BINARIES') == 'true') {
            logger.warn('Production builds MUST NOT be built with public binaries.\nUse artifactory/whitelisted-repos for production builds.\n\n')
            maven { url 'https://dl.bintray.com/alphagov/maven-test' }
            jcenter()
        }
        else {
            maven { url 'https://artifactory.ida.digital.cabinet-office.gov.uk/artifactory/whitelisted-repos' }
        }
    }
    dependencies {
        classpath 'com.github.spullara.mustache.java:compiler:0.8.10',
                'org.yaml:snakeyaml:1.10',
                'uk.gov.ida:ida-gradle:1.1.0-23',
                'com.google.guava:guava:14.0.1',
                'com.github.ben-manes:gradle-versions-plugin:0.17.0'
    }
}

apply plugin: 'java'
apply plugin: 'com.github.ben-manes.versions'

ext {
    opensaml_version = '3.3.0'
    dropwizard_version = '1.2.0'
    utilsVersion = '2.0.0'
    build_version = "$opensaml_version-${System.env.BUILD_NUMBER ?: 'SNAPSHOT'}"
}


subprojects {

    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'maven-publish'

    group = "uk.gov.ida"
    version = "0.1.$version"

    repositories {
        if (System.getenv('VERIFY_USE_PUBLIC_BINARIES') == 'true') {
            logger.warn('Production builds MUST NOT be built with public binaries.\nUse artifactory/whitelisted-repos for production builds.\n\n')
            maven { url 'https://dl.bintray.com/alphagov/maven' } // For dropwizard-logstash
            maven { url 'https://dl.bintray.com/alphagov/maven-test' } // For other public verify binaries
            jcenter()
        }
        else {
            maven { url 'https://artifactory.ida.digital.cabinet-office.gov.uk/artifactory/whitelisted-repos' }
        }
    }

    configurations {
        common
        dropwizard
        saml
    }

    dependencies {

        dropwizard (
                "io.dropwizard:dropwizard-core:${dropwizard_version}",
                "io.dropwizard:dropwizard-client:${dropwizard_version}",
                "io.dropwizard:dropwizard-views-mustache:${dropwizard_version}"
        )
        saml (
                "org.opensaml:opensaml-core:${opensaml_version}",
                "org.opensaml:opensaml-saml-impl:${opensaml_version}",
                "uk.gov.ida:ida-saml-extensions:${opensaml_version}-1.2a-41",
                "uk.gov.ida:saml-metadata-bindings:${opensaml_version}-68",
                "uk.gov.ida:saml-security:${opensaml_version}-58",
                "uk.gov.ida:hub-saml:${opensaml_version}-115",
                "se.litsec.eidas:eidas-opensaml3:1.0.5"
        )
        common (
                "uk.gov.ida:security-utils:${utilsVersion}-331"
        )

        testCompile(
                "junit:junit:4.12",
                "org.hamcrest:hamcrest-core:1.3",
                "org.hamcrest:hamcrest-library:1.3",
                "io.dropwizard:dropwizard-testing:${dropwizard_version}",
                "net.sourceforge.htmlunit:htmlunit:2.28",
                "uk.gov.ida:common-test-utils:${utilsVersion}-38",
                "uk.gov.ida:saml-metadata-bindings-test:${opensaml_version}-68",
                "uk.gov.verify:saml-test-utils:${opensaml_version}-2",
        )
    }
}

task paasManifestFileCheck {
    doFirst {
        if (!project.hasProperty('manifestFile')) {
            def usage = './gradlew pushToPaas -PmanifestFile=<path to file>'
            println 'Manifest file is missing!!'
            println "Please run " + usage
            throw new GradleException("Usage: " + usage)
        }
    }
}

defaultTasks 'clean', 'test', 'jar'
