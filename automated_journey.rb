#!/usr/bin/env ruby

def wait_and_click selectors
  element = @driver.find_element(selectors)
  @wait.until { element.displayed? }
  element.click
end

def wait_and_select selectors
  element = @driver.find_element(selectors)
  @wait.until do
    element.click rescue 'error'
    element.selected?
  end
end

def run
  @driver.get 'http://localhost:56000'
  @driver.switch_to.window( @driver.window_handles.last )

  # SP first page
  # Select UK
  @driver.find_element(id: 'eidasconnector_title').click
  wait_and_click css: '#eidasconnector_child li:nth-child(2)'

  # Select UK2
  @driver.find_element(id: 'citizeneidas_title').click
  wait_and_click css: '#citizeneidas_child li:nth-child(3)'

  # Select Substantial LOA
  dropDownMenu = @driver.find_element(id: 'eidasloa')
  option = Selenium::WebDriver::Support::Select.new(dropDownMenu)
  option.select_by(:value, 'http://eidas.europa.eu/LoA/substantial')

  # Require only Mandatory attributes
  @driver.find_element(id: 'check_all_NoRequestEidas').click
  @driver.find_element(id: 'tab2_toggle1').click
  wait_and_select(id: 'Mandatory_FamilyNameEidas')
  wait_and_select(id: 'Mandatory_FirstNameEidas')
  wait_and_select(id: 'Mandatory_DateOfBirthEidas')
  wait_and_select(id: 'Mandatory_PersonIdentifierEidas')

  @driver.find_element(id: 'submit_tab2').click

  #Submit saml request generated by the SP
  @driver.find_element(id: 'submit_saml').click

  #Submit on proxy node
  @driver.find_element(css: 'input[type="submit"]').click



  # Fill in stub-idp username and password
  @driver.find_element(id: 'username').send_keys('stub-idp-demo')
  @driver.find_element(id: 'password').send_keys('bar')
  @driver.find_element(id: 'login').click

  #Submit consent with stub-idp
  @driver.find_element(id: 'agree').click


  #Submit on proxy node
  encodedResponse = @driver.find_element(id: 'SAMLResponse').attribute('value')
  puts header('SAML EIDAS RESPONSE').green
  puts `echo #{encodedResponse} | base64 -D | xmllint --format -`
  puts footer.green

  #Submit connector node to Service Provider
  @driver.find_element(id: 'submit_saml').click
rescue => error
  puts header('ERROR').red
  puts error
  puts footer.red
ensure
  sleep(60)
end

def header title
  " #{title} ".center(80, '*')
end

def footer
  '*'*80
end

puts `gem install selenium-webdriver && gem install colorize`
require 'selenium-webdriver'
require 'colorize'
@wait = Selenium::WebDriver::Wait.new(timeout: 25)
@driver = Selenium::WebDriver.for :chrome
run
